// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceCodeCtlClient is the client API for SourceCodeCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceCodeCtlClient interface {
	ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error)
	ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*ListRepoResponse, error)
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	ListTemplates(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	IsRepoConnected(ctx context.Context, in *IsRepoConnectedRequest, opts ...grpc.CallOption) (*IsRepoConnectedResponse, error)
}

type sourceCodeCtlClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceCodeCtlClient(cc grpc.ClientConnInterface) SourceCodeCtlClient {
	return &sourceCodeCtlClient{cc}
}

func (c *sourceCodeCtlClient) ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/ListOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceCodeCtlClient) ListRepo(ctx context.Context, in *ListRepoRequest, opts ...grpc.CallOption) (*ListRepoResponse, error) {
	out := new(ListRepoResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/ListRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceCodeCtlClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceCodeCtlClient) ListTemplates(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateResponse, error) {
	out := new(ListTemplateResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceCodeCtlClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceCodeCtlClient) IsRepoConnected(ctx context.Context, in *IsRepoConnectedRequest, opts ...grpc.CallOption) (*IsRepoConnectedResponse, error) {
	out := new(IsRepoConnectedResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.scc.SourceCodeCtl/IsRepoConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceCodeCtlServer is the server API for SourceCodeCtl service.
// All implementations should embed UnimplementedSourceCodeCtlServer
// for forward compatibility
type SourceCodeCtlServer interface {
	ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error)
	ListRepo(context.Context, *ListRepoRequest) (*ListRepoResponse, error)
	CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error)
	ListTemplates(context.Context, *ListTemplateRequest) (*ListTemplateResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	IsRepoConnected(context.Context, *IsRepoConnectedRequest) (*IsRepoConnectedResponse, error)
}

// UnimplementedSourceCodeCtlServer should be embedded to have forward compatible implementations.
type UnimplementedSourceCodeCtlServer struct {
}

func (UnimplementedSourceCodeCtlServer) ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrg not implemented")
}
func (UnimplementedSourceCodeCtlServer) ListRepo(context.Context, *ListRepoRequest) (*ListRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepo not implemented")
}
func (UnimplementedSourceCodeCtlServer) CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedSourceCodeCtlServer) ListTemplates(context.Context, *ListTemplateRequest) (*ListTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedSourceCodeCtlServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedSourceCodeCtlServer) IsRepoConnected(context.Context, *IsRepoConnectedRequest) (*IsRepoConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRepoConnected not implemented")
}

// UnsafeSourceCodeCtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceCodeCtlServer will
// result in compilation errors.
type UnsafeSourceCodeCtlServer interface {
	mustEmbedUnimplementedSourceCodeCtlServer()
}

func RegisterSourceCodeCtlServer(s grpc.ServiceRegistrar, srv SourceCodeCtlServer) {
	s.RegisterService(&SourceCodeCtl_ServiceDesc, srv)
}

func _SourceCodeCtl_ListOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).ListOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/ListOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).ListOrg(ctx, req.(*ListOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceCodeCtl_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/ListRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).ListRepo(ctx, req.(*ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceCodeCtl_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceCodeCtl_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).ListTemplates(ctx, req.(*ListTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceCodeCtl_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceCodeCtl_IsRepoConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRepoConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceCodeCtlServer).IsRepoConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.scc.SourceCodeCtl/IsRepoConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceCodeCtlServer).IsRepoConnected(ctx, req.(*IsRepoConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceCodeCtl_ServiceDesc is the grpc.ServiceDesc for SourceCodeCtl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceCodeCtl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.tenant.scc.SourceCodeCtl",
	HandlerType: (*SourceCodeCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrg",
			Handler:    _SourceCodeCtl_ListOrg_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _SourceCodeCtl_ListRepo_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _SourceCodeCtl_CreateRepo_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _SourceCodeCtl_ListTemplates_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _SourceCodeCtl_GetProfile_Handler,
		},
		{
			MethodName: "IsRepoConnected",
			Handler:    _SourceCodeCtl_IsRepoConnected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aserto/tenant/scc/scc.proto",
}
