// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package onboarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OnboardingClient is the client API for Onboarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnboardingClient interface {
	ClaimTenant(ctx context.Context, in *ClaimTenantRequest, opts ...grpc.CallOption) (*ClaimTenantResponse, error)
	TenantAvailable(ctx context.Context, in *TenantAvailableRequest, opts ...grpc.CallOption) (*TenantAvailableResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
}

type onboardingClient struct {
	cc grpc.ClientConnInterface
}

func NewOnboardingClient(cc grpc.ClientConnInterface) OnboardingClient {
	return &onboardingClient{cc}
}

func (c *onboardingClient) ClaimTenant(ctx context.Context, in *ClaimTenantRequest, opts ...grpc.CallOption) (*ClaimTenantResponse, error) {
	out := new(ClaimTenantResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.onboarding.Onboarding/ClaimTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingClient) TenantAvailable(ctx context.Context, in *TenantAvailableRequest, opts ...grpc.CallOption) (*TenantAvailableResponse, error) {
	out := new(TenantAvailableResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.onboarding.Onboarding/TenantAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onboardingClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, "/aserto.tenant.onboarding.Onboarding/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnboardingServer is the server API for Onboarding service.
// All implementations should embed UnimplementedOnboardingServer
// for forward compatibility
type OnboardingServer interface {
	ClaimTenant(context.Context, *ClaimTenantRequest) (*ClaimTenantResponse, error)
	TenantAvailable(context.Context, *TenantAvailableRequest) (*TenantAvailableResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
}

// UnimplementedOnboardingServer should be embedded to have forward compatible implementations.
type UnimplementedOnboardingServer struct {
}

func (UnimplementedOnboardingServer) ClaimTenant(context.Context, *ClaimTenantRequest) (*ClaimTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTenant not implemented")
}
func (UnimplementedOnboardingServer) TenantAvailable(context.Context, *TenantAvailableRequest) (*TenantAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAvailable not implemented")
}
func (UnimplementedOnboardingServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}

// UnsafeOnboardingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnboardingServer will
// result in compilation errors.
type UnsafeOnboardingServer interface {
	mustEmbedUnimplementedOnboardingServer()
}

func RegisterOnboardingServer(s grpc.ServiceRegistrar, srv OnboardingServer) {
	s.RegisterService(&Onboarding_ServiceDesc, srv)
}

func _Onboarding_ClaimTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).ClaimTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.onboarding.Onboarding/ClaimTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).ClaimTenant(ctx, req.(*ClaimTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Onboarding_TenantAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).TenantAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.onboarding.Onboarding/TenantAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).TenantAvailable(ctx, req.(*TenantAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Onboarding_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnboardingServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.tenant.onboarding.Onboarding/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnboardingServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Onboarding_ServiceDesc is the grpc.ServiceDesc for Onboarding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Onboarding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.tenant.onboarding.Onboarding",
	HandlerType: (*OnboardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTenant",
			Handler:    _Onboarding_ClaimTenant_Handler,
		},
		{
			MethodName: "TenantAvailable",
			Handler:    _Onboarding_TenantAvailable_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Onboarding_InviteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aserto/tenant/onboarding/onboarding.proto",
}
